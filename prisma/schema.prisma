// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Users 
enum UserRole {
  ADMIN
  PROVIDER_SUPER_ADMIN
  PROVIDER_ADMIN
  SUPER_AGENT
  AGENT
  CASHIER
}

enum ProviderUserRole {
  SUPER_ADMIN
  ADMIN 
}

// Users 
enum ActiveStatus {
  ACTIVE
  IN_ACTIVE
}

model User {
  id       String @id @default(cuid())
  firstName String
  lastName String

  email       String? 
  userName    String? @unique
  phoneNumber String 
  password    String

  role            UserRole
  status          ActiveStatus     @default(ACTIVE)

  createdAt       DateTime         @default(now())
  deletedAt DateTime?        
  deleted Boolean @default(false)
  updatedAt       DateTime         @updatedAt
  refreshTokens   RefreshToken[] 

 // Provider relations
  providerId     String?
  provider       Provider?  @relation("ProviderAdmins", fields: [providerId], references: [id], onDelete: Cascade)

  // Agent relations
  superAgentId   String?
  superAgent     User?      @relation("AgentToAgents", fields: [superAgentId], references: [id], onDelete: Cascade)
  agents         User[]     @relation("AgentToAgents")
  agentProviderId String?
  agentProvider   Provider?  @relation("ProviderAgents", fields: [agentProviderId], references: [id], onDelete: Cascade)
  agentBranches         Branch[] @relation("BranchAgent")

  // cashier relations
  cashierBranchId   String?
  cashierBranch         Branch?          @relation("CashierBranch", fields: [cashierBranchId], references: [id], onDelete: Cascade)
  tickets        Ticket[] 
  cancelledTickets        Ticket[] @relation(name: "cancelledTickets")
  ticketPayments TicketPayment[]
   
}  


enum AgentRule {
  SUPER_AGENT
  AGENT 
}
 

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String?
  User        User?     @relation(fields: [userId], references: [id], onDelete: Cascade) 
 

  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
 

// providers
model Provider {
  id         String @id @default(cuid())
  name       String
  identifier String @unique
  address    String
  status    ActiveStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
   deletedAt DateTime?        
  deleted Boolean @default(false)
  
  branches  Branch[]
  
   // Relations with Users
  admins     User[]     @relation("ProviderAdmins")
  agents     User[]     @relation("ProviderAgents")
}

// branch
model Branch {
  id         String @id @default(cuid())
  identifier String @unique
  name       String
  address    String

  status    ActiveStatus     @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?        
  deleted Boolean @default(false)

  providerId String
  provider  Provider         @relation(fields: [providerId], references: [id], onDelete: Cascade)

  agentId String?
  agent  User?         @relation("BranchAgent", fields: [agentId], references: [id], onDelete: Cascade)

  cashiers  User[] @relation("CashierBranch")
  games     Game[]
}

// Keno Game
enum GameStatus {
  NOT_STARTED
  ON_PLAY
  DONE
}

// Keno Game
enum GameType {
  KENO
  DOG_RACING
  HORSE_RASING
}

enum TicketStatus {
  ON_PLAY
  WIN
  LOSE
  PAID
  CANCELLED
}

enum TicketSelectionStatus {
  ON_PLAY
  WIN
  LOSE
  PAID
}

// Base Game model
model Game {
  id       String     @id @default(cuid())
  uniqueId String
  branchId String
  gameType GameType
  startAt  DateTime
  endAt    DateTime
  status   GameStatus @default(NOT_STARTED)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch    Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tickets   Ticket[]
  keno      KenoGame?
  dogRacing DogRacingGame? // Add other game relations here
}

model Ticket {
  id                String       @id @default(cuid())
  uniqueId          String
  totalBetAmount    Float?
  possibleWinAmount Float?
  winAmount         Float?       @default(0.0)
  status            TicketStatus @default(ON_PLAY)
  createdAt         DateTime     @default(now())

  gameId            String
  game            Game             @relation(fields: [gameId], references: [id])

  cashierId         String
  cashier         User   @relation(fields: [cashierId], references: [id]) 


  cancelledAt         DateTime? 
  cancelledCashierId         String?
  cancelledBy         User?   @relation(name: "cancelledTickets", fields: [cancelledCashierId], references: [id]) 


  kenoTicket      KenoTicket?
  dogRacingTicket DogRacingTicket? // Add other game ticket relations here
  payment         TicketPayment?
}

model KenoGame {
  id                             String   @id @default(cuid())
  gameId                         String   @unique
  winningNumbers                 Int[]
  ticketWillBeDisabledAt         DateTime
  winningNumberWillBeShowedAt DateTime 

  game Game @relation(fields: [gameId], references: [id])
}

model DogRacingGame {
  id                             String   @id @default(cuid())
  gameId                         String   @unique 
  ticketWillBeDisabledAt         DateTime  

  game Game @relation(fields: [gameId], references: [id])
}

model KenoTicket {
  id         String            @id @default(cuid())
  ticketId   String            @unique
  selections TicketSelection[]

  ticket Ticket @relation(fields: [ticketId], references: [id])
}

model DogRacingTicket {
  id       String @id @default(cuid())
  ticketId String @unique
  // Add specific fields for AnotherGameTicket

  ticket Ticket @relation(fields: [ticketId], references: [id])
}

model TicketSelection {
  id                String                @id @default(cuid())
  ticketId          String
  selectedNumbers   Int[]
  betAmount         Float
  possibleWinAmount Float?
  winAmount         Float? 
  status            TicketStatus @default(ON_PLAY)

  ticket            KenoTicket            @relation(fields: [ticketId], references: [id])
}

model TicketPayment {
  id          String       @id @default(cuid())
  ticketId    String       @unique
  cashierId   String
  paidAmount Float?       @default(0.0) 
  createdAt   DateTime     @default(now())

  ticket  Ticket         @relation(fields: [ticketId], references: [id])
  cashier User @relation(fields: [cashierId], references: [id])
}
